"use strict";
/*
 * Copyright (C) 2022 Vaticle
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ClusterUser = void 0;
const cluster_user_pb_1 = require("typedb-protocol/cluster/cluster_user_pb");
const RequestBuilder_1 = require("../../common/rpc/RequestBuilder");
const dependencies_internal_1 = require("../../dependencies_internal");
class ClusterUser {
    constructor(client, username, passwordExpiryDays) {
        this._client = client;
        this._username = username;
        this._passwordExpiryDays = passwordExpiryDays;
    }
    static of(user, client) {
        switch (user.getPasswordExpiryCase()) {
            case cluster_user_pb_1.User.PasswordExpiryCase.PASSWORD_EXPIRY_NOT_SET: return new ClusterUser(client, user.getUsername(), null);
            case cluster_user_pb_1.User.PasswordExpiryCase.PASSWORD_EXPIRY_DAYS: return new ClusterUser(client, user.getUsername(), user.getPasswordExpiryDays());
        }
    }
    get passwordExpiryDays() {
        return this._passwordExpiryDays;
    }
    async passwordUpdate(oldPassword, newPassword) {
        const failsafeTask = new ClusterUserFailsafeTask(this._client, (replica) => {
            return this._client.stub(replica.address).userPasswordUpdate(RequestBuilder_1.RequestBuilder.Cluster.User.passwordUpdateReq(this.username, oldPassword, newPassword));
        });
        await failsafeTask.runPrimaryReplica();
    }
    get username() {
        return this._username;
    }
}
exports.ClusterUser = ClusterUser;
class ClusterUserFailsafeTask extends dependencies_internal_1.FailsafeTask {
    constructor(client, task) {
        super(client, dependencies_internal_1.ClusterUserManager._SYSTEM_DB);
        this._task = task;
    }
    run(replica) {
        return this._task(replica);
    }
}

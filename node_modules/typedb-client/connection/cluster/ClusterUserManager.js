"use strict";
/*
 * Copyright (C) 2022 Vaticle
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ClusterUserManager = void 0;
const RequestBuilder_1 = require("../../common/rpc/RequestBuilder");
const dependencies_internal_1 = require("../../dependencies_internal");
class ClusterUserManager {
    constructor(client) {
        this._client = client;
    }
    async all() {
        const failsafeTask = new UserManagerFailsafeTask(this._client, (replica) => {
            return this._client.stub(replica.address).usersAll(RequestBuilder_1.RequestBuilder.Cluster.UserManager.allReq())
                .then((res) => {
                return res.getUsersList().map(user => dependencies_internal_1.ClusterUser.of(user, this._client));
            });
        });
        return await failsafeTask.runPrimaryReplica();
    }
    async contains(username) {
        const failsafeTask = new UserManagerFailsafeTask(this._client, (replica) => {
            return this._client.stub(replica.address).usersContains(RequestBuilder_1.RequestBuilder.Cluster.UserManager.containsReq(username));
        });
        return await failsafeTask.runPrimaryReplica();
    }
    async create(username, password) {
        const failsafeTask = new UserManagerFailsafeTask(this._client, (replica) => {
            return this._client.stub(replica.address).usersCreate(RequestBuilder_1.RequestBuilder.Cluster.UserManager.createReq(username, password));
        });
        await failsafeTask.runPrimaryReplica();
    }
    async delete(username) {
        const failsafeTask = new UserManagerFailsafeTask(this._client, (replica) => {
            return this._client.stub(replica.address).usersDelete(RequestBuilder_1.RequestBuilder.Cluster.UserManager.deleteReq(username));
        });
        await failsafeTask.runPrimaryReplica();
    }
    async get(username) {
        const failsafeTask = new UserManagerFailsafeTask(this._client, (replica) => {
            return this._client.stub(replica.address).usersGet(RequestBuilder_1.RequestBuilder.Cluster.UserManager.getReq(username));
        });
        return dependencies_internal_1.ClusterUser.of((await failsafeTask.runPrimaryReplica()).getUser(), this._client);
    }
    async passwordSet(username, password) {
        const failsafeTask = new UserManagerFailsafeTask(this._client, (replica) => {
            return this._client.stub(replica.address).usersPasswordSet(RequestBuilder_1.RequestBuilder.Cluster.UserManager.passwordSetReq(username, password));
        });
        await failsafeTask.runPrimaryReplica();
    }
}
exports.ClusterUserManager = ClusterUserManager;
ClusterUserManager._SYSTEM_DB = "_system";
class UserManagerFailsafeTask extends dependencies_internal_1.FailsafeTask {
    constructor(client, task) {
        super(client, ClusterUserManager._SYSTEM_DB);
        this._task = task;
    }
    async run(replica) {
        return await this._task(replica);
    }
}
